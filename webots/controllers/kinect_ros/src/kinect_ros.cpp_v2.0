/************************************************************************
 *
 * kinect_ros.cpp modifed from joystick.cpp
 *
 * Sample implementation of a Webots controller as a ROS node
 *
 * This Webots controller is a ROS node that simply publishes
 * kinect ROS node to broadcast kinect 3D image.
 *
 * Date:    Jul. 13th 2012
 * Authors: JongSuk Choi, KIST
 *
 ************************************************************************/

#include <webots/robot.h>
#include <webots/differential_wheels.h>
#include <ros/ros.h>
#include <joy/Joy.h>
#include <signal.h>
#include <errno.h>

//--------------------------------------------------------------------------
//      Added by jschoi for ROS, 2012-07-16
#include "std_msgs/String.h"
#include <sstream>
//--------------------------------------------------------------------------

//---------------------------------------------------------------------------------
//      Added by jschoi for ROS, 2012-07-13
#include <webots/camera.h>
#include <webots/servo.h> 
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define MAX_SPEED 10.0
#define CRUISING_SPEED 7.5
#define TOLERANCE -0.1
#define OBSTACLE_THRESHOLD 0.5
#define SLOWDOWN_FACTOR 0.5

#ifndef PI
#define PI  3.141592
#endif

static WbDeviceTag leftWheel, rightWheel;
static WbDeviceTag kinect;
//static WbDeviceTag ptcam;
const float* kinectValues;
static int time_step = 0;
//---------------------------------------------------------------------------------

#define SPEED 50

enum{JOYPAD_LEFT = 1, JOYPAD_RIGHT, JOYPAD_UP, JOYPAD_DOWN, JOYPAD_STOP};

static int cmd;

void joy_callback(const joy::Joy::ConstPtr& joy) {
/*
  // display all the axes and buttons values from the joy node
  printf("Axes:");
  for(size_t i=0;i<joy->axes.size();i++) printf(" %g",joy->axes[i]);
  printf(" - Buttons:");
  for(size_t i=0;i<joy->buttons.size();i++) printf(" %d",joy->buttons[i]);
  printf("\n");
 */

  // depending on your joystick, you may want to set the
  // cmd variable according to different axes or buttons events.

  // find the biggest axis position
  float m=0;
  for(size_t i=0;i<2;i++) if (fabsf(joy->axes[i]) > m) m=fabsf(joy->axes[i]);
  if (m>0.1) {
         if ( joy->axes[0] == m) cmd=JOYPAD_LEFT;
    else if (-joy->axes[0] == m) cmd=JOYPAD_RIGHT;
    else if ( joy->axes[1] == m) cmd=JOYPAD_UP;
    else if (-joy->axes[1] == m) cmd=JOYPAD_DOWN;
  }
  // force stop if button 1 or button 2 is pressed
  if (joy->buttons[0] || joy->buttons[1]) cmd=JOYPAD_STOP;

/*
  printf("cmd=%d\n",cmd);
 */
}

int main(int argc, char **argv) {

  wb_robot_init();

  // check if roslaunch is properly installed
  if (system("which roslaunch > /dev/null")!=0) {
    fprintf(stderr,"Cannot find roslaunch in PATH. Please check that ROS is properly installed.\n");
    wb_robot_cleanup();
    return 0;
  }

  // launch the joy ROS node
  int roslaunch=fork();
  if (roslaunch==0) { // child process
    execlp("roslaunch","roslaunch","joy.launch",NULL);
    return 0;
  }

  // From this point we assume the ROS_ROOT, ROS_MASTER_URI and
  // ROS_PACKAGE_PATH environment variables are set appropriately.
  // See ROS manuals to set them properly.  
  ros::init(argc, argv, "kinect_ros");
  ros::NodeHandle nh;
  ros::Subscriber sub=nh.subscribe("joy", 10, joy_callback);

//--------------------------------------------------------------------------
//      Added by jschoi for ROS, 2012-07-16
  ros::NodeHandle nh_pub;
  ros::Publisher chatter_pub=nh_pub.advertise<std_msgs::String>("chatter", 1000);
  int count=0;
//--------------------------------------------------------------------------

  double left_speed = 0;
  double right_speed = 0;
  
  ROS_INFO("Joypad connected and running.");
  ROS_INFO("Commands:");
  ROS_INFO("arrow up: move forward, speed up");
  ROS_INFO("arrow down: move backward, slow down");
  ROS_INFO("arrow left: turn left");
  ROS_INFO("arrow right: turn right");
  
//---------------------------------------------------------------------------------
//      Added by jschoi for ROS, 2012-07-13
//           get time step and robot's devices
  time_step  = wb_robot_get_basic_time_step();
  kinect     = wb_robot_get_device("kinect_robot");
  wb_camera_enable(kinect, time_step);
  int kinectWidth = wb_camera_get_width(kinect);
  int kinectHeight = wb_camera_get_height(kinect);
  int halfWidth   = kinectWidth/2;
  int viewHeight  = kinectHeight/2 + 10;
  double maxRange = wb_camera_get_max_range(kinect);
  double rangeThreshold = 1.5;
  double invMaxRangeTimesWidth = 1.0 / (maxRange * kinectWidth);
/*
  //////////////////////////////////
  // get the pan/tilt camera device, enable it, and store its width and height
  WbDeviceTag ptcam = wb_robot_get_device("ptcam");
  wb_camera_enable(ptcam, time_step);
  //int ptcam_width = wb_camera_get_width(ptcam);
  //int ptcam_height = wb_camera_get_height(ptcam); 

  // initialize pan/tilt camera servos
  WbDeviceTag pan_servo, tilt_servo;
  pan_servo = wb_robot_get_device("ptcam_pan_servo");
  tilt_servo = wb_robot_get_device("ptcam_tilt_servo"); 

  // init speeds
  double pan_speed = 1.0*PI; // rad/s
  double tilt_speed = 2.0*PI; // rad/s
  double pan_Kp = 40.;
  double tilt_Kp = 40.;
  double pan_angle, tilt_angle;
  
  wb_servo_set_velocity(pan_servo, pan_speed);  
  wb_servo_set_control_p(pan_servo, pan_Kp);
  wb_servo_set_acceleration(pan_servo, -1); // No limit in acceleration

  wb_servo_set_velocity(tilt_servo, tilt_speed);
  wb_servo_set_control_p(tilt_servo, tilt_Kp);
  wb_servo_set_acceleration(tilt_servo, -1); // No limit in acceleration
  
  
  pan_angle = PI/2.;  tilt_angle = PI/2.;
  pan_angle = 0;  tilt_angle = 0;
  wb_servo_set_position(pan_servo, pan_angle);
  wb_servo_set_position(tilt_servo, tilt_angle);  
  
  //wb_servo_set_position(pan_servo, INFINITY); // for velocity control
  //////////////////////////////////

  // set servos' positions
  wb_servo_set_position(leftWheel,INFINITY);
  wb_servo_set_position(rightWheel,INFINITY);
  // set speeds 
  wb_servo_set_velocity(leftWheel, 0.0);
  wb_servo_set_velocity(rightWheel, 0.0);
  //perform one control loop
  wb_robot_step(time_step);
  
  // init dynamic variables
  double leftObstacle = 0.0, rightObstacle = 0.0, obstacle = 0.0;
  double deltaObstacle = 0.0;
  double leftSpeed = CRUISING_SPEED, rightSpeed = CRUISING_SPEED;
  double speedFactor  = 1.0;
  float value = 0.0;
  int i = 0;

  while (1) {
    // get range-finder values
    kinectValues = (float*) wb_camera_get_range_image(kinect);
    
    for (i = 0; i < halfWidth; i++) {
    // record near obstacle sensed on the left side
      value = wb_camera_range_image_get_depth(kinectValues, kinectWidth, i, viewHeight);
      if(value < rangeThreshold) { // far obstacles are ignored
        leftObstacle += value;
      }
    // record near obstacle sensed on the right side
      value = wb_camera_range_image_get_depth(kinectValues, kinectWidth, kinectWidth - i, viewHeight);
      if(value < rangeThreshold) {
        rightObstacle += value;
      }
    }
    
    obstacle  =  leftObstacle + rightObstacle;
    
    // compute the speed according to the information on
    // possible left and right obstacles
    if(obstacle > 0.0){
      obstacle = 1.0 - obstacle * invMaxRangeTimesWidth;// compute the relevant overall quantity of obstacle
      speedFactor = (obstacle > OBSTACLE_THRESHOLD) ? 0.0 : SLOWDOWN_FACTOR;
      deltaObstacle = - (leftObstacle - rightObstacle) * invMaxRangeTimesWidth;
      if(deltaObstacle > TOLERANCE){
        leftSpeed    =               CRUISING_SPEED;
        rightSpeed   = speedFactor * CRUISING_SPEED;   
      }
      else {
        leftSpeed    = speedFactor *  CRUISING_SPEED;
        rightSpeed   =                CRUISING_SPEED;
      }
    }
    else {
       leftSpeed    = CRUISING_SPEED;
       rightSpeed   = CRUISING_SPEED;
    }

    // set speeds
    wb_servo_set_velocity(leftWheel,  leftSpeed);
    wb_servo_set_velocity(rightWheel, rightSpeed);
  
    // run simulation
    wb_robot_step(time_step);
    leftObstacle  = 0.0;
    rightObstacle = 0.0;
  }
*/
//---------------------------------------------------------------------------------


  // control loop: simulation steps of 32 ms
  while(wb_robot_step(32) != -1) {
    //---------------------------------------------------------------------
    //      Added by jschoi for ROS, 2012-07-13
    std_msgs::String msg;

    std::stringstream ss;
    ss << "hello world" << count;
    msg.data = ss.str();
    ROS_INFO("%s",msg.data.c_str());
    chatter_pub.publish(msg);
    ++count;
    //---------------------------------------------------------------------

/*
    // get callback called
    ros::spinOnce();

    switch(cmd) {

    case JOYPAD_UP:
      left_speed=SPEED;
      right_speed=SPEED;
      break;

    case JOYPAD_DOWN:
      left_speed=-SPEED;
      right_speed=-SPEED;
      break;
        
    case JOYPAD_LEFT:
      left_speed=-SPEED;
      right_speed=SPEED;
      break;
       
    case JOYPAD_RIGHT:
      left_speed=SPEED;
      right_speed=-SPEED;
      break;
      
    case JOYPAD_STOP:
      left_speed = 0;
      right_speed = 0;
      break;
    }

    // set motor speeds
    wb_differential_wheels_set_speed(left_speed, right_speed);
*/
  }

  ros::shutdown();

  kill(roslaunch,SIGINT); // terminate roslaunch for joy ROS node as with Ctrl-C

  wb_robot_cleanup();

  return 0;
}
